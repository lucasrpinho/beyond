<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAACc
        CgAAAk1TRnQBSQFMAgEBAgEAAVABAAFQAQABFAEAARQBAAT/AREBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABFAMAAQEBAAEQBQABgAEMEgABvgF3AbYBVgF0AU4BlAFSARgBYwG9AXcB3gF7Af8BfwH/AX8B/wF/
        Af8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/Ad4Be3gAAXQBUgHPAUEBrwE9Ac8BOQEQ
        AUIB9wFeAb0BdwH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/
        AX8KAAH/AX8B/wF/Af8BfwH/AX8B/wF/ZAAB7AFJAewBVQHvAVEB0QFBAa8BOQERAUYB9wFeAb0BdwH/
        AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwoAAd4BewH9AXsB3AF7
        Af4BfwH/AX9kAAGtAXoBaQFyASwBYgHwAVEB0QFBAc8BOQEQAUIB9wFeAb0BdwH/AX8B/wF/Af8BfwH/
        AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/CAAB/wF/AbsBdwFzAWcBcAFfAbgBbwHdAXtkAAHS
        AX4BrAF+AWoBcgEsAWIBDwFSAfEBRQHPATkBMQFGAfcBXgG9AXcB/wF/Af8BfwH/AX8B/wF/Af8BfwH/
        AX8B/wF/Af8BfwH/AX8B/wF/BAAB/wF/Ad4BewG7AXMBcQFjAQcBSwHkAUIBTQFXAbgBbwHdAXsB3gF7
        YAABnAF/AdIBfgGsAX4BaQF2ASsBZgEPAVIB8gFBAc8BOQERAUIB9wFeAf8BfwH/AX8B/wF/Af8BfwH/
        AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwIAAf8BfwHeAXsB2gFzAU0BWwEFAUcB4QE+AeABPgEDAUMBKAFP
        AVABXwH9AXsB3gF7XgAB/wF/AZoBfwHyAX4BjAF+AYkBdgEMAWIB8AFRAfEBQQHQAT0BEAFCAZQBVgGU
        AVYBlAFWAZQBVgG1AVYBGAFjAb0BdwH/AX8B/wF/Af8BfwIAAf8BfwG5AXMBTAFTAQMBQwHgAT4B4AE+
        AeABPgHgAT4B4AE+AQMBQwFvAV8BuwF3XgAB/wF/Af8BfwF6AX8B8gF+AawBfgFqAXIBDAFiARABTgHw
        AT0BzwE5ARIBPgEzAUIBVAFGAVQBSgEzAUYBMgFKAdYBWgG9AXcB/wF/Af8BfwIAAboBcwFNAVcB4QFC
        AeABPgECAUMBKAFPAU0BWwEqAVMB4gFCAeABPgEDAUMBcQFjAdwBdwHeAXtaAAH/AX8B/wF/Af8BfwGa
        AX8B0gF+Aa0BfgFLAXIBLwFWATIBRgFUAUYB2gFKAfsBUgE8AVcBPAFbAfkBVgFzAUoBEQFCAdYBWgG9
        AXcB3gF7Ad0BdwErAVMB4QE+AeABOgHgAT4BBwFLAZQBZwHbAXcBlgFrAQcBTwHgAT4B4AE+AQQBRwFw
        AV8B3QF7Ad4Be1gAAf8BfwH/AX8B/wF/Af8BfwGcAX8BswF+AVABfgE0AVoBuQFOAX8BWwHfAWMB/wFn
        Af8BbwH/AW8B/wFzAZ0BawGXAU4B0AE9AbUBVgHeAXsBKAFPAeEBPgHAAToB4AE+AcABOgEoAU8BvAF3
        AgABuwF3AW4BWwHAAToB4AE+AeABPgHgAT4BTAFXAd0Bd1gAAf8BfwH/AX8B/wF/Af8BfwH/AX8BnAF7
        AdkBYgHaAVYBXQFXAb8BXwHfAWMB/wFrAf8BcwH/AXcB/wF/Af8BewF8AWcBVAFGARIBQgEYAWMB4gE+
        AeABPgHAAT4B4AE+AUkBUwG6AXMB3gF7AgAB3gF7AdsBdwFLAVcB4wFCAeABPgHgAT4B4wFGAXABXwG8
        AXcB/wF/Af8Bf1IAAf8BfwH/AX8B/wF/Af8BfwH/AX8B3wF3ATwBXwE9AVcBnwFbAb8BXwH/AWMB/wFv
        Af8BdwH/AXsB/wF/Af8BewHfAW8B2QFOARIBPgG2AVYBSwFXAeQBQgHiAT4BKQFPAbYBawHdAXsGAAHe
        AXsBuwFzAW8BWwEFAUcB4AE+AeABPgEEAUcBcAFfAdwBdwHeAXsB/wF/UAAB/wF/Af8BfwH/AX8B/wF/
        Af8BfwHfAXcBPAFfAX0BWwG/AV8BvwFbAf8BYwH/AW8B/wFzAf8BdwH/AXsB/wF7Af8BbwE8AVcBNAFC
        AZUBVgG5AXMBcgFfAU8BWwG1AWsB/wF/Ad4BewoAAdoBcwFwAV8BBAFHAeABPgHgAT4BAgFDAW8BWwHc
        AXcB/wF/UAAB/wF/Af8BfwH/AX8B/wF/Af8BfwHeAXcBPAFfAX0BXwG/AV8BvwFbAd8BYwH/AWsB/wFv
        Af8BcwH/AXcB/wFzAf8BbwFdAVcBVQFCAZUBVgHeAXsB3gF7Af4BfwH/AX8B/wF/Ad4BewoAAd4BewHb
        AXcBcQFfAQYBRwHhAT4B4AE+AeIBQgFwAV8B3AF3UAAB/wF/Af8BfwH/AX8B/wF/Af8BfwHfAXcBPAFf
        AX0BXwG/AWMBvwFfAd8BXwH/AWcB/wFrAf8BbwH/AW8B/wFvAf8BZwE8AVcBVQFCAZUBVgIAAf8BfwHe
        AXsB3gF7Ad4BewwAAf8BfwHeAXsB3AF3AZMBYwEpAU8B4QE+AcABOgEFAUsBkwFnUAAB/wF/Af8BfwH/
        AX8B/wF/Af8BfwHfAXcBPQFfAZ0BXwHfAWcB3wFrAb8BXwHfAWMB/wFjAf8BZwH/AWcB/wFnAd8BYwH7
        AVIBVQFGAdYBWhgAAf8BfwHeAXsB3AF3AZYBawEoAUsBwAE+AeEBPgFNAVtQAAH/AX8B/wF/Af8BfwH/
        AX8B/wF/Ad8BdwE9AV8BfQFfAd8BbwH/AXcB3wFrAb8BYwHfAV8BvwFfAb8BXwHfAWMBngFbAbkBSgGY
        AVIBewFvHAAB3gF7Af4BfwG4AW8BKQFPAQYBSwFzAWNQAAH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BewGe
        AWsBXQFjAZ4BZwHfAXMB/wF3Ad8BZwG/AV8BvwFbAb8BXwF/AVsBHAFTAdoBVgFcAWsB3gF7HAAB/wF/
        Ad4BewH/AX8BuQFzAbcBawHcAXdQAAH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8BnQFvAV0BYwGd
        AWcBvwFvAb8BYwG/AV8BvwFbAX4BWwE8AVcB+gFWAX0BbwH/AX8B/wF/HgAB/wF/Af8BfwH/AX8B3gF7
        Af8Bf1AAAf8BfwH/AX8B/wF/Af8BfwH/AX8B/wF/Af8BfwH/AX8BfgFvAfsBVgHaAVIBuQFKAdsBTgH8
        AVIBuQFOAbYBUgGcAXMB/wF/Af8BfwH/AX94AAFCAU0BPgcAAT4DAAEoAwABUAMAARQDAAEBAQABAQUA
        AfAXAAP/AwABDwL/CQABDwGDAf8JAAEPAYMB/wkAAQ8BAwH/CQABDAEAAf8JAAEIAQABfwkAAQgBAAF/
        CQABCAEAAR8LAAEPCgABEAEPCgABEAEBCgABOAsAAT4LAAE+CgABCAF+CgABDwH/CgABDwH/AcAJAAEP
        Af8BwAkAAQ8B/wHgCQABDwL/BwAL
</value>
  </data>
</root>